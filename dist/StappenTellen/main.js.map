{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/random-number-generator.ts","webpack:///./src/app/result-component/result-component.component.css","webpack:///./src/app/result-component/result-component.component.html","webpack:///./src/app/result-component/result-component.component.ts","webpack:///./src/app/stapel-tellen.result.ts","webpack:///./src/app/stapel-tellen.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<h2>Stapeltellen</h2>\\r\\n<!-- <div [formGroup]=\\\"form\\\" >\\r\\n  <input type=\\\"text\\\" formControlName=\\\"input\\\" />\\r\\n  <div>\\r\\n    {{input}}\\r\\n  </div>\\r\\n</div> -->\\r\\n<div >\\r\\n  <input type=\\\"button\\\" (click)=\\\"generate()\\\" value=\\\"Nieuw\\\" />\\r\\n  <input type=\\\"number\\\" [(ngModel)]=\\\"input\\\" /><input type=\\\"submit\\\" (click)=\\\"calculate()\\\" value=\\\"Reken uit!\\\" />\\r\\n  <app-result-component [result]=\\\"result\\\"></app-result-component>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl } from \"@angular/forms\";\r\nimport { StapelTellen } from './stapel-tellen';\r\nimport { StapelTellenResult } from './stapel-tellen.result';\r\nimport { RandomNumberGenerator } from './random-number-generator';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'app';\r\n  input: string = '';\r\n  // stapelTellen;\r\n  \r\n  // constructor(private builder: FormBuilder) { }\r\n  constructor(private stapelTellen: StapelTellen){\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.generate();\r\n  }\r\n\r\n  // form = this.builder.group({\r\n  //   input: ['']\r\n  // });\r\n\r\n  result: StapelTellenResult[] = this.calculateInternal();\r\n\r\n  public generate(){\r\n    let random = RandomNumberGenerator.getRandomNumber();\r\n    this.input = random.toString();\r\n  }\r\n\r\n  public calculate(){\r\n    this.result = this.calculateInternal();\r\n  }\r\n\r\n  private calculateInternal(): StapelTellenResult[] {\r\n    if(this.input != ''){\r\n      return this.stapelTellen.calculate(this.input.toString());\r\n    }\r\n\r\n    return [];\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ResultComponentComponent } from './result-component/result-component.component';\r\nimport { StapelTellen } from './stapel-tellen';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ResultComponentComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    ServiceWorkerModule.register('/ngsw-worker.js', { enabled: environment.production })\r\n  ],\r\n  providers: [\r\n    StapelTellen\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","export class RandomNumberGenerator {\r\n    public static getRandomNumber(): number {\r\n        return Math.floor(Math.random() * (999999 - 100000)) + 100000;\r\n        // const control = <FormArray>this.myFormdata.controls['inputs'];\r\n        // const random = this._fb.group({numbers: +quickpicked, pari: 25});\r\n        // control.setControl(i, random)\r\n    \r\n    \r\n      }\r\n}\r\n","module.exports = \"\"","module.exports = \"<div *ngFor=\\\"let res of result\\\">\\n  <h3>Resultaat: {{res.result}}</h3>\\n  <!-- {{ res | json }} -->\\n  <ul>\\n    <li *ngFor=\\\"let step of res.steps\\\">{{step}}</li>\\n  </ul>\\n  <!-- <div *ngIf=\\\"result.subResult != undefined\\\"> -->\\n    <!-- <app-result-component [result]=\\\"res.subResult\\\" *ngIf=\\\"res.subResult\\\"></app-result-component> -->\\n    <!-- </div> -->\\n</div>\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { StapelTellenResult } from '../stapel-tellen.result';\n\n@Component({\n  selector: 'app-result-component',\n  templateUrl: './result-component.component.html',\n  styleUrls: ['./result-component.component.css']\n})\nexport class ResultComponentComponent implements OnInit {\n\n  constructor() { }\n  @Input()\n  result: StapelTellenResult[];\n\n  ngOnInit() {\n  }\n\n}\n","export class StapelTellenResult {\r\n    public result: string;\r\n    public steps: string[];\r\n    public subResult: StapelTellenResult;  \r\n}","import { StapelTellenResult } from \"./stapel-tellen.result\";\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class StapelTellen {\r\n\r\n    public calculate(input: string): StapelTellenResult[] {\r\n        let array: StapelTellenResult[] = [];\r\n        let res = this.calculateTemp(input);\r\n        array.push(res);\r\n        let result = res.result;\r\n        \r\n        // console.log('result.length: ' + result.length);\r\n        let iteration = 1;\r\n        while (result.length > 1 || iteration > 10)\r\n        {\r\n            // console.log(result)\r\n            let temp  = this.calculateTemp(result);\r\n            array.push(temp);\r\n            // console.log(temp);\r\n            result = temp.result;\r\n            // temp.steps.forEach(s => res.steps.push(s));\r\n            // res.result = temp.result;\r\n            res.subResult = temp;\r\n            iteration++;\r\n        }\r\n\r\n\r\n        // return result;\r\n        // res.result = result;\r\n        // console.log('result: ' + res.result);\r\n        return array;\r\n    }\r\n\r\n    private calculateTemp(input: string) {\r\n        // console.log('input: ' + input);\r\n        let i = 0;\r\n        let res = new StapelTellenResult();\r\n        res.steps = [];\r\n        let result = '';\r\n        while (i < input.length) {\r\n            let x = input.charAt(i);\r\n            let y = (i + 1 < input.length) ? input.charAt(i + 1) : '0';\r\n            var sum = +x + +y;\r\n            const sumDescription = x + ' + ' + y + ' = ' + sum;\r\n            // console.log(sumDescription);\r\n            res.steps.push(sumDescription);\r\n            result += '' + sum + '';\r\n            // console.log(result);\r\n            i += 2;\r\n        }\r\n        res.result = result;\r\n        console.log(res);\r\n        return res;\r\n    }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}